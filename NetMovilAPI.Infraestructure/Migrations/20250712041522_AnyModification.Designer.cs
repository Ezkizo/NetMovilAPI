// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetMovilAPI.Infraestructure.DataAccess;

#nullable disable

namespace NetMovilAPI.Infraestructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250712041522_AnyModification")]
    partial class AnyModification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.OrderModels.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("BarCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("BranchID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("OrderStatusID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.OrderModels.OrderProduct", b =>
                {
                    b.Property<int>("OrderProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderProductID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("OrderProductID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.ProductModels.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<string>("BarCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsStock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductStatusID")
                        .HasColumnType("int");

                    b.Property<decimal>("ProfitMargin")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("StockID")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("BranchID");

                    b.HasIndex("ProductStatusID");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            BasePrice = 50.00m,
                            BranchID = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            Description = "Este es un producto de prueba",
                            ImageUrl = "defaultproduct.png",
                            IsStock = false,
                            Name = "Ejemplo producto",
                            ProductStatusID = 3,
                            ProfitMargin = 100m,
                            UnitPrice = 100m
                        });
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.ProductModels.ProductCategory", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            CategoryID = 1
                        });
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.SaleModels.Sale", b =>
                {
                    b.Property<int>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleID"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatusID")
                        .HasColumnType("int");

                    b.Property<int>("SaleStatusID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("SaleID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.HasIndex("PaymentStatusID");

                    b.HasIndex("SaleStatusID");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.SaleModels.SalePayment", b =>
                {
                    b.Property<int>("SalePaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalePaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatusID")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("SaleID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("SalePaymentID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("PaymentStatusID");

                    b.HasIndex("SaleID");

                    b.ToTable("SalePayment");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Shared.Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchID"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BranchID");

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            BranchID = 1,
                            Address = "Dirección sucursal 1",
                            Name = "Sucursal 1"
                        },
                        new
                        {
                            BranchID = 2,
                            Address = "Dirección sucursal 2",
                            Name = "Sucursal 2"
                        });
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Shared.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<int>("CategoryStatusID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.HasIndex("CategoryStatusID");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryStatusID = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            Description = "Categoría de ejemplo",
                            ImageUrl = "defaultcategory.png",
                            Name = "Ejemplo"
                        });
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Shared.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodID"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            PaymentMethodID = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            Description = "Pago en efectivo directo a caja.",
                            IsActive = true,
                            Name = "Efectivo"
                        },
                        new
                        {
                            PaymentMethodID = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            Description = "Transferencia DIMO, banca digital o CODI.",
                            IsActive = true,
                            Name = "Transferencia"
                        },
                        new
                        {
                            PaymentMethodID = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            Description = "Pago en terminal bancaria, se abona a una cuenta digital.",
                            IsActive = true,
                            Name = "Terminal"
                        });
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Shared.Stock", b =>
                {
                    b.Property<int>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockID"));

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Threshold")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("StockID");

                    b.HasIndex("BranchID");

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Statuses.CategoryStatus", b =>
                {
                    b.Property<int>("CategoryStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryStatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CategoryStatusID");

                    b.ToTable("CategoryStatus");

                    b.HasData(
                        new
                        {
                            CategoryStatusID = 1,
                            Description = "Eliminada"
                        },
                        new
                        {
                            CategoryStatusID = 2,
                            Description = "Inactiva"
                        },
                        new
                        {
                            CategoryStatusID = 3,
                            Description = "Activa"
                        });
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Statuses.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("OrderStatusID");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            OrderStatusID = 1,
                            Description = "Eliminada"
                        },
                        new
                        {
                            OrderStatusID = 2,
                            Description = "Cancelada"
                        },
                        new
                        {
                            OrderStatusID = 3,
                            Description = "En reclamación"
                        },
                        new
                        {
                            OrderStatusID = 4,
                            Description = "Activa"
                        },
                        new
                        {
                            OrderStatusID = 5,
                            Description = "Completada"
                        });
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Statuses.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentStatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PaymentStatusID");

                    b.ToTable("PaymentStatus");

                    b.HasData(
                        new
                        {
                            PaymentStatusID = 1,
                            Description = "Eliminado"
                        },
                        new
                        {
                            PaymentStatusID = 2,
                            Description = "Cancelado"
                        },
                        new
                        {
                            PaymentStatusID = 3,
                            Description = "Rechazado"
                        },
                        new
                        {
                            PaymentStatusID = 4,
                            Description = "En espera"
                        },
                        new
                        {
                            PaymentStatusID = 5,
                            Description = "Aceptado"
                        });
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Statuses.ProductStatus", b =>
                {
                    b.Property<int>("ProductStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductStatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ProductStatusID");

                    b.ToTable("ProductStatus");

                    b.HasData(
                        new
                        {
                            ProductStatusID = 1,
                            Description = "Eliminado"
                        },
                        new
                        {
                            ProductStatusID = 2,
                            Description = "Fuera de Stock"
                        },
                        new
                        {
                            ProductStatusID = 3,
                            Description = "En existencia"
                        });
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Statuses.SaleStatus", b =>
                {
                    b.Property<int>("SaleStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleStatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("SaleStatusID");

                    b.ToTable("SaleStatus");

                    b.HasData(
                        new
                        {
                            SaleStatusID = 1,
                            Description = "Eliminada"
                        },
                        new
                        {
                            SaleStatusID = 2,
                            Description = "Cancelada"
                        },
                        new
                        {
                            SaleStatusID = 3,
                            Description = "Pendiente"
                        },
                        new
                        {
                            SaleStatusID = 4,
                            Description = "Pagada"
                        });
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Statuses.UserStatus", b =>
                {
                    b.Property<int>("UserStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserStatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserStatusID");

                    b.ToTable("UserStatus");

                    b.HasData(
                        new
                        {
                            UserStatusID = 1,
                            Description = "Eliminado"
                        },
                        new
                        {
                            UserStatusID = 2,
                            Description = "Inactivo"
                        },
                        new
                        {
                            UserStatusID = 3,
                            Description = "Activo"
                        });
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.UserModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserStatusID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserStatusID");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.UserModels.UserAddress", b =>
                {
                    b.Property<int>("UserAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAddressID"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<int?>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("References")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValue("Sin referencias");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserAddressID");

                    b.HasIndex("UserID");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("NetMovilAPI.Infraestructure.Models.UserModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("NetMovilAPI.Infraestructure.Models.UserModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetMovilAPI.Infraestructure.Models.UserModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("NetMovilAPI.Infraestructure.Models.UserModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.OrderModels.Order", b =>
                {
                    b.HasOne("NetMovilAPI.Infraestructure.Models.Shared.Branch", "Branch")
                        .WithMany("Orders")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NetMovilAPI.Infraestructure.Models.UserModels.User", "Customer")
                        .WithMany("OrdersAsCustomer")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("NetMovilAPI.Infraestructure.Models.UserModels.User", "Employee")
                        .WithMany("OrdersAsEmployee")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NetMovilAPI.Infraestructure.Models.Statuses.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.OrderModels.OrderProduct", b =>
                {
                    b.HasOne("NetMovilAPI.Infraestructure.Models.OrderModels.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NetMovilAPI.Infraestructure.Models.ProductModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.ProductModels.Product", b =>
                {
                    b.HasOne("NetMovilAPI.Infraestructure.Models.Shared.Branch", "Branch")
                        .WithMany("Products")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NetMovilAPI.Infraestructure.Models.Statuses.ProductStatus", "ProductStatus")
                        .WithMany("Products")
                        .HasForeignKey("ProductStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("ProductStatus");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.ProductModels.ProductCategory", b =>
                {
                    b.HasOne("NetMovilAPI.Infraestructure.Models.Shared.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetMovilAPI.Infraestructure.Models.ProductModels.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.SaleModels.Sale", b =>
                {
                    b.HasOne("NetMovilAPI.Infraestructure.Models.OrderModels.Order", "Order")
                        .WithOne()
                        .HasForeignKey("NetMovilAPI.Infraestructure.Models.SaleModels.Sale", "OrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NetMovilAPI.Infraestructure.Models.Statuses.PaymentStatus", "PaymentStatus")
                        .WithMany("Sales")
                        .HasForeignKey("PaymentStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NetMovilAPI.Infraestructure.Models.Statuses.SaleStatus", "SaleStatus")
                        .WithMany("Sales")
                        .HasForeignKey("SaleStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentStatus");

                    b.Navigation("SaleStatus");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.SaleModels.SalePayment", b =>
                {
                    b.HasOne("NetMovilAPI.Infraestructure.Models.Shared.PaymentMethod", "PaymentMethod")
                        .WithMany("SalePayments")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NetMovilAPI.Infraestructure.Models.Statuses.PaymentStatus", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NetMovilAPI.Infraestructure.Models.SaleModels.Sale", "Sale")
                        .WithMany("Payments")
                        .HasForeignKey("SaleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentStatus");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Shared.Category", b =>
                {
                    b.HasOne("NetMovilAPI.Infraestructure.Models.Statuses.CategoryStatus", "CategoryStatus")
                        .WithMany("Categories")
                        .HasForeignKey("CategoryStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CategoryStatus");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Shared.Stock", b =>
                {
                    b.HasOne("NetMovilAPI.Infraestructure.Models.Shared.Branch", "Branch")
                        .WithMany("Stocks")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NetMovilAPI.Infraestructure.Models.ProductModels.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("NetMovilAPI.Infraestructure.Models.Shared.Stock", "ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.UserModels.User", b =>
                {
                    b.HasOne("NetMovilAPI.Infraestructure.Models.Shared.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("NetMovilAPI.Infraestructure.Models.Statuses.UserStatus", "UserStatus")
                        .WithMany("Users")
                        .HasForeignKey("UserStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.UserModels.UserAddress", b =>
                {
                    b.HasOne("NetMovilAPI.Infraestructure.Models.UserModels.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.OrderModels.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.ProductModels.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.SaleModels.Sale", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Shared.Branch", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("Stocks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Shared.PaymentMethod", b =>
                {
                    b.Navigation("SalePayments");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Statuses.CategoryStatus", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Statuses.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Statuses.PaymentStatus", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Statuses.ProductStatus", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Statuses.SaleStatus", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.Statuses.UserStatus", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NetMovilAPI.Infraestructure.Models.UserModels.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("OrdersAsCustomer");

                    b.Navigation("OrdersAsEmployee");
                });
#pragma warning restore 612, 618
        }
    }
}
